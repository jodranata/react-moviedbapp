{"version":3,"sources":["components/Card.js","components/Searchbar.js","components/Suggestions.js","App.js","serviceWorker.js","index.js"],"names":["backdropURL","greenTMDB","Searchbar","props","handleChange","handleSubmit","resetSearchedListState","fontIcon","hideFontAwesome","className","src","alt","onSubmit","type","onChange","e","target","value","name","placeholder","autoComplete","onBlur","onFocus","icon","faSearch","stringifyData","dataArray","map","data","join","Card","document","body","style","backgroundImage","console","log","details","this","title","genres","companies","releaseDate","runtime","overview","tagline","backdrop","poster","vote","genresTag","companiesTag","posterURL","voteTag","toFixed","yearTag","slice","min","undefined","hour","Math","floor","restMinute","hrPostFix","minPostFix","hourify","React","Component","Suggestions","searchedList","handleClick","list","movie","titles","ids","icons","iconURL","date","year","onClick","onKeyDown","keyCode","role","key","aria-selected","aria-multiselectable","apiKey","App","fetchAPI","query","url","fetch","then","blob","json","results","errors","total_results","result","id","poster_path","release_date","setState","isShown","input","tokenize","length","string","trim","toLowerCase","replace","searchByID","a","fetchURL","production_companies","backdrop_path","vote_average","preventDefault","state","setTimeout","callback","wait","timeout","args","context","clearTimeout","apply","debounce","CSSTransition","in","classNames","mountOnEnter","appear","exit","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1911517.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction stringifyData(dataArray) {\n  if (dataArray) {\n    const nestedData = dataArray.map(data => data.name);\n    return nestedData.join(', ');\n  }\n}\n\nlet backdropURL;\n\nfunction hourify(min) {\n  if (min === undefined || min === null || min < 1) return 0;\n  if (min <= 60) return `${min} mins`;\n  const hour = Math.floor(min / 60);\n  const restMinute = min - hour * 60;\n  const hrPostFix = hour > 1 ? 'hrs' : 'hr';\n  const minPostFix = restMinute > 1 ? 'mins' : 'min';\n  return `${hour} ${hrPostFix} ${restMinute} ${minPostFix}`;\n}\n\nexport default class Card extends React.Component {\n  componentDidUpdate() {\n    document.body.style.backgroundImage = `url(${backdropURL})`;\n    console.log('updated');\n  }\n\n  render() {\n    const { details } = this.props;\n    const {\n      title,\n      genres,\n      companies,\n      releaseDate,\n      runtime,\n      overview,\n      tagline,\n      backdrop,\n      poster,\n      vote,\n    } = details;\n\n    const genresTag = stringifyData(genres);\n    const companiesTag = stringifyData(companies);\n    // eslint-disable-next-line max-len\n    const noPoster = `http://placehold.jp/300/919191/ffffff/500x750.png?text=%3F&css=%7B%22border%22%3A%22%2014px%20solid%20rgba(0%2C0%2C0%2C0.2)%22%7D`;\n    const posterURL = poster ? `https://image.tmdb.org/t/p/w500${poster}` : noPoster;\n    backdropURL = `https://image.tmdb.org/t/p/original${backdrop}`;\n    const voteTag = vote ? `${vote.toFixed(1)}` : `-`;\n    const yearTag = releaseDate ? releaseDate.slice(0, 4) : `-`;\n\n    return (\n      <div className=\"card-section\">\n        <div className=\"card-poster-section\">\n          <img src={posterURL} alt=\"\" />\n        </div>\n        <div className=\"card-details-section\">\n          <div className=\"title-detail\">\n            <h1>{title}</h1>\n            {tagline && <p>{tagline}</p>}\n          </div>\n          <div className=\"vote-detail\">\n            <h2>{voteTag}</h2>\n          </div>\n          <div className=\"overview-detail\">\n            <p className=\"overview-text\">{overview}</p>\n            <div className=\"tag-details\">\n              {genresTag && (\n                <div className=\"genres-tag\">\n                  <p>{genresTag}</p>\n                </div>\n              )}\n              {companiesTag && (\n                <div className=\"companies-tag\">\n                  <p>{companiesTag}</p>\n                </div>\n              )}\n              {releaseDate && (\n                <div className=\"opt-tag\">\n                  <p className=\"tag\">Year:</p>\n                  <p>{yearTag}</p>\n                </div>\n              )}\n              {runtime && (\n                <div className=\"opt-tag\">\n                  <p className=\"tag\">Runtime:</p>\n                  <p>{hourify(runtime)}</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nCard.propTypes = {\n  details: PropTypes.shape({\n    title: PropTypes.string,\n    genres: PropTypes.array,\n    companies: PropTypes.array,\n    releaseDate: PropTypes.string,\n    runtime: PropTypes.number,\n    overview: PropTypes.string,\n    tagline: PropTypes.string,\n    backdrop: PropTypes.string,\n    poster: PropTypes.string,\n    vote: PropTypes.number,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\n// eslint-disable-next-line max-len\nconst greenTMDB = `https://www.themoviedb.org/assets/2/v4/logos/powered-by-rectangle-green-dcada16968ed648d5eb3b36bbcfdd8cdf804f723dcca775c8f2bf4cea025aad6.svg`;\n\nexport default function Searchbar(props) {\n  const { handleChange, handleSubmit, resetSearchedListState, fontIcon, hideFontAwesome } = props;\n  return (\n    <div className=\"search-header\">\n      <img src={greenTMDB} alt=\"\" className=\"tmdb-logo\" />\n      <form onSubmit={handleSubmit}>\n        <div className=\"input-bar\">\n          <input\n            type=\"text\"\n            onChange={e => handleChange(e.target.value)}\n            name=\"search\"\n            placeholder=\"Movie title..\"\n            autoComplete=\"off\"\n            className=\"search-input\"\n            /* when out of focus, the fetched initial data is cleared */\n            onBlur={resetSearchedListState}\n            /* when on focus, hide font awesome by turning fontIcon state to false */\n            onFocus={hideFontAwesome}\n          />\n          {fontIcon && <FontAwesomeIcon icon={faSearch} className=\"search-icon\" />}\n        </div>\n      </form>\n    </div>\n  );\n}\n\nSearchbar.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  resetSearchedListState: PropTypes.func.isRequired,\n  fontIcon: PropTypes.bool.isRequired,\n  hideFontAwesome: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Suggestions(props) {\n  const { searchedList, handleClick } = props;\n  const list = searchedList.map(movie => {\n    const { titles, ids, icons } = movie;\n    // eslint-disable-next-line max-len\n    const noIcons = `http://placehold.jp/300/919191/ffffff/500x750.png?text=%3F&css=%7B%22border%22%3A%22%2014px%20solid%20rgba(0%2C0%2C0%2C0.2)%22%7D`;\n    const iconURL = icons ? `https://image.tmdb.org/t/p/w500${icons}` : noIcons;\n    const date = movie.year ? movie.year.slice(0, 4) : `-`;\n    return (\n      <li\n        onClick={() => handleClick(ids)}\n        onKeyDown={e => {\n          if (e.keyCode === 13) handleClick(ids);\n        }}\n        role=\"option\"\n        key={ids}\n        aria-selected=\"false\"\n        className=\"lists\"\n      >\n        <img src={iconURL} alt=\"\" className=\"list-icon\" />\n        <div className=\"list-detail\">\n          <p className=\"list-title\">{titles}</p>\n          <p className=\"list-year\">{date}</p>\n        </div>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"suggestions-header\">\n      <ul className=\"suggestions-list\" role=\"listbox\" aria-multiselectable=\"true\">\n        {list}\n      </ul>\n    </div>\n  );\n}\n\nSuggestions.propTypes = {\n  searchedList: PropTypes.arrayOf(\n    PropTypes.shape({\n      titles: PropTypes.string.isRequired,\n      ids: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport Searcbar from './components/Searchbar';\nimport Card from './components/Card';\nimport Suggestions from './components/Suggestions';\nimport './index.css';\n\nconst apiKey = `da2d7c1da5f30b2d200caef54d3a17d9`;\nfunction debounce(callback, wait) {\n  let timeout;\n  return (...args) => {\n    const context = this;\n    clearTimeout(timeout);\n    timeout = setTimeout(() => callback.apply(context, args), wait);\n  };\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isShown: false,\n      searchedList: null,\n      fontIcon: true,\n    };\n    this.handleChange = debounce(this.handleChange, 300);\n  }\n\n  //  fetch initial data\n  fetchAPI = query => {\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${query}`;\n    fetch(url)\n      .then(blob => blob.json())\n      .then(data => {\n        console.log(data);\n        const { results, errors } = data;\n        const totalResult = data.total_results;\n        let searchedList;\n        if (totalResult >= 1 && !errors) {\n          searchedList = results.map(result => {\n            return {\n              titles: result.title,\n              ids: result.id,\n              icons: result.poster_path,\n              year: result.release_date,\n            };\n          });\n        } else {\n          searchedList = null;\n        }\n        this.setState({\n          searchedList,\n          isShown: true,\n        });\n      });\n  };\n\n  //  fetch initial data when typing >> data is debounce so it fetch data doesn't happen to often\n  handleChange = input => {\n    const value = this.tokenize(input);\n    console.log(value);\n    if (value.length >= 2) this.fetchAPI(value);\n    else if (value.length < 1) {\n      this.setState({\n        searchedList: null,\n        isShown: false,\n      });\n    }\n  };\n\n  tokenize = string => {\n    return string\n      .trim()\n      .toLowerCase()\n      .replace(/\\s/gi, '%20');\n  };\n\n  /* fetch full data by ID generated from initial fetch}  */\n  searchByID = async id => {\n    const url = `https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}`;\n    const fetchURL = await fetch(url);\n    const movie = await fetchURL.json();\n    this.setState({\n      searchedList: null,\n      details: {\n        title: movie.title,\n        genres: movie.genres,\n        companies: movie.production_companies,\n        releaseDate: movie.release_date,\n        runtime: movie.runtime,\n        overview: movie.overview,\n        tagline: movie.tagline,\n        backdrop: movie.backdrop_path,\n        poster: movie.poster_path,\n        vote: movie.vote_average,\n      },\n    });\n  };\n  //  search particular movie by id when clicked\n  handleClick = input => {\n    const id = input;\n    console.log(id);\n    this.searchByID(id);\n  };\n\n  // search when form is submitted/enter\n  handleSubmit = e => {\n    e.preventDefault();\n    const { searchedList } = this.state;\n    if (searchedList !== null) {\n      const input = searchedList[0].ids;\n      this.searchByID(input);\n    }\n  };\n\n  resetSearchedListState = () => {\n    this.setState({\n      isShown: false,\n    });\n    setTimeout(() => {\n      this.setState({\n        searchedList: null,\n        isShown: false,\n        fontIcon: true,\n      });\n    }, 300);\n  };\n\n  hideFontAwesome = () => {\n    this.setState({\n      fontIcon: false,\n    });\n  };\n\n  render() {\n    const { searchedList, details, isShown, fontIcon } = this.state;\n    const {\n      handleChange,\n      handleClick,\n      handleSubmit,\n      resetSearchedListState,\n      hideFontAwesome,\n    } = this;\n    return (\n      <div className=\"app-container\">\n        <div className=\"suggestions-list-section\">\n          <Searcbar\n            handleChange={handleChange}\n            handleSubmit={handleSubmit}\n            resetSearchedListState={resetSearchedListState}\n            fontIcon={fontIcon}\n            hideFontAwesome={hideFontAwesome}\n          />\n          {searchedList && (\n            <CSSTransition\n              in={isShown}\n              timeout={300}\n              classNames=\"suggestions-fade\"\n              mountOnEnter\n              appear\n              exit\n            >\n              <Suggestions searchedList={searchedList} handleClick={handleClick} />\n            </CSSTransition>\n          )}\n        </div>\n        {details && <Card details={details} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}